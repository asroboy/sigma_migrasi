/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package controller;

import config.HibernateUtilXml;
import domain.MdDataIdentificationTopcat;
import java.math.BigDecimal;
import model.table.MdDataIdentificationTopcatModel;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author Fauzy Ramedia
 */
public class MdDataIdentificationTopcatController {

    public MdDataIdentificationTopcatController() {
    }

    HibernateUtilXml hibernateUtilXml;
    Session session;

    public MdDataIdentificationTopcatController(Session session, HibernateUtilXml hibernateUtilXml) {
        this.hibernateUtilXml = hibernateUtilXml;
        this.session = session;
    }

    public MdDataIdentificationTopcat getDataById(BigDecimal Id) {

        MdDataIdentificationTopcat topcat = new MdDataIdentificationTopcat();

        if (!session.isOpen()) {
            session = hibernateUtilXml.buildSession().openSession();
        }
        Transaction trx = session.beginTransaction();

        try {
            if (!trx.isActive()) {
                trx.begin();
            }

            Criteria criteria = session.createCriteria(MdDataIdentificationTopcat.class);
            criteria.add(Restrictions.eq("mdDataIdentificationId", Id));
            topcat = (MdDataIdentificationTopcat) criteria.uniqueResult();

            if (topcat == null) {
                return null;
            }

            trx.commit();
        } catch (Exception e) {
            trx.rollback();
            e.printStackTrace();
        } finally {
            //session.close();
        }

        return topcat;
    }
    
    public String deletedMdDataIdentificationTopcat(BigDecimal Id) {

        MdDataIdentificationTopcat topcat = new MdDataIdentificationTopcat();

        if (!session.isOpen()) {
            session = hibernateUtilXml.buildSession().openSession();
        }
        Transaction trx = session.beginTransaction();

        try {
            if (!trx.isActive()) {
                trx.begin();
            }

            Criteria criteria = session.createCriteria(MdDataIdentificationTopcat.class);
            criteria.add(Restrictions.eq("mdDataIdentificationId", Id));
            topcat = (MdDataIdentificationTopcat) criteria.uniqueResult();

            session.delete(topcat);
            trx.commit();
            
            return "deleted successfully.....!!";
        } catch (Exception e) {
            trx.rollback();
            return e.getMessage();
        } finally {
            //session.close();
        }
    }

    public String saveMdDataIdentificationTopcat(MdDataIdentificationTopcatModel mdModel) {
        MdDataIdentificationTopcat MdDataIdentificationTopcat = new MdDataIdentificationTopcat();

        if (!session.isOpen()) {
            session = hibernateUtilXml.buildSession().openSession();
        }
        Transaction trx = session.getTransaction();

        try {
            if (!trx.isActive()) {
                trx.begin();
            }

            MdDataIdentificationTopcat.setMdDataIdentificationId(mdModel.getMdDataIdentificationId());
            MdDataIdentificationTopcat.setTopicCategory(mdModel.getTopicCategory());

            session.save(MdDataIdentificationTopcat);
            trx.commit();

            return "saved successfully.....!!";
        } catch (Exception e) {
            trx.rollback();
            return e.getMessage();
        } finally {
            //session.close();
        }
    }

    public String updateMdDataIdentificationTopcat(BigDecimal id,MdDataIdentificationTopcatModel mdModel) {

        MdDataIdentificationTopcat topcat = new MdDataIdentificationTopcat();

        if (!session.isOpen()) {
            session = hibernateUtilXml.buildSession().openSession();
        }
        Transaction trx = session.beginTransaction();

        try {
            if (!trx.isActive()) {
                trx.begin();
            }

            Criteria criteria = session.createCriteria(MdDataIdentificationTopcat.class);
            criteria.add(Restrictions.eq("mdDataIdentificationId", id));
            topcat = (MdDataIdentificationTopcat) criteria.uniqueResult();

            topcat.setTopicCategory(mdModel.getTopicCategory());

            session.update(topcat);
            trx.commit();

            return "updated successfully.....!!";
        } catch (Exception e) {
            trx.rollback();
            return e.getMessage();
        } finally {
            //session.close();
        }
    }

}
