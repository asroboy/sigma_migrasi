/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.big.tools;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.ParseException;
import com.vividsolutions.jts.io.WKTReader;
import java.io.IOException;

/**
 *
 * @author Ridho
 */
public class GeometryTool {

    public static String getSkala(String skala) {
        String resSkala = null;
        if (skala.equalsIgnoreCase("1:5.000")) {
            resSkala = "5000";
        } else if (skala.equalsIgnoreCase("1:10.000")) {
            resSkala = "10000";
        } else if (skala.equalsIgnoreCase("1.25.000")) {
            resSkala = "25000";
        } else if (skala.equalsIgnoreCase("1:100.000")) {
            resSkala = "100000";
        } else if (skala.equalsIgnoreCase("1:250.000")) {
            resSkala = "250000";
        } else if (skala.equalsIgnoreCase("1:500.000")) {
            resSkala = "500000";
        } else {
            resSkala = "1000000";
        }

        return resSkala;

    }

    public static String getGeomTypeSDO(int code) {
        String geomType = "";
        switch (code) {
            case 1:
                geomType = "PT";
                break;
            case 2:
                geomType = "LN";
                break;
            case 3:
                geomType = "AR";
                break;
            case 4:
                geomType = "";
                break;
            case 5:
                geomType = "PT";
                break;
            case 6:
                geomType = "LN";
                break;
            case 7:
                geomType = "AR";
                break;
        }
        return geomType;
    }

    public static String getGeomCodes(String TYPE) {
        if (TYPE.equalsIgnoreCase("PT")) {
            return "(1,5)";
        } else if (TYPE.equalsIgnoreCase("LN")) {
            return "(2,6)";
        } else if (TYPE.equalsIgnoreCase("AR")) {
            return "(3,7)";
        } else {
            return "";
        }

    }

    public static Geometry getGeometry(String wkt, LogWriter logger) throws IOException, ParseException {
        if(wkt.length() > 100){
             System.out.println("WKT " + wkt.substring(0, 100) + "....");
        }else{
            System.out.println("WKT " + wkt);
        }
       
        WKTReader reader = new WKTReader();
        if (wkt == null) {
            return null;
        } else {
            if (wkt.equals("")) {
                System.out.println("WKT IS EMPTY");
                return null;
            } else {
                if (wkt.contains("ZM")) {
                    Geometry geom = null;

                    String wkkt2 = wkt.replace("ZM", "");
//                    if (wkkt2.contains("1.#QNAN000")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("nan", "");
//                        wkkt2 = wkkt2.replace("nan)", ")");
////                        System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
////                        geom = reader.read(wkkt2);
//                    }
//                    if (wkkt2.contains("nan")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("nan", "");
//                        wkkt2 = wkkt2.replace("nan)", ")");
////                      System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
////                        geom = reader.read(wkkt2);
//
//                    }
//
//                    if (wkkt2.contains("NAN")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("NAN", "");
//                        wkkt2 = wkkt2.replace("NAN)", ")");
////                      System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
////                        geom = reader.read(wkkt2);
//
//                    }
//                    if (wkkt2.contains("0.00000000,")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("nan", "");
//                        wkkt2 = wkkt2.replace("nan)", ")");
////                        System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
//
//                    }
//                    if (wkkt2.contains("0)")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("0)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("nan", "");
//                        wkkt2 = wkkt2.replace("nan)", ")");
////                        System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
//                    }
//                    if (wkkt2.contains("NAN)")) {
//                        wkkt2 = wkkt2.replace("1.#QNAN000", "");
//                        wkkt2 = wkkt2.replace("0.00000000,", ",");
//                        wkkt2 = wkkt2.replace("0.00000000)", ")");
//                        wkkt2 = wkkt2.replace("0)", ")");
//                        wkkt2 = wkkt2.replace("1.#QNAN000)", ")");
//                        wkkt2 = wkkt2.replace("nan", "");
//                        wkkt2 = wkkt2.replace("nan)", ")");
//                        wkkt2 = wkkt2.replace("NAN)", ")");
////                        System.out.println("WKT BARU " + wkkt2);
//                        //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
//                    }

                    wkkt2 = wkkt2.replace(" 1.#QNAN000", "");
                    wkkt2 = wkkt2.replace(" 1.#QNAN000)", ")");
                    wkkt2 = wkkt2.replace(" 0.00000000,", ",");
                    wkkt2 = wkkt2.replace(" 0.00000000)", ")");
                    wkkt2 = wkkt2.replace(" 0)", ")");
                    wkkt2 = wkkt2.replace(" 0,", ",");
                    wkkt2 = wkkt2.replace(" nan", "");
                    wkkt2 = wkkt2.replace(" nan)", ")");
                    wkkt2 = wkkt2.replace(" NAN", "");
                    wkkt2 = wkkt2.replace(" NAN)", ")");

//                    System.out.println("WKT BARU " + wkkt2);
                    geom = reader.read(wkkt2);
                    return geom;
                } else if (wkt.contains("Z")) {
                    String wkkt2 = wkt.replace("Z", "");
//                    System.out.println("WKT BARU " + wkkt2);
                    //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
                    Geometry geom = reader.read(wkkt2);
                    return geom;

                } else {
                    //INSERT GEOMETRI YG DIPEROLEH KE TABLE SDO --> ADMINISTRASI_LN_25K_SDO
                    Geometry geom = reader.read(wkt);
                    return geom;

                }
            }
        }

    }

    public static boolean isGeometryKnown(String wkt) {
        boolean isKNown;
        if (wkt == null) {
            isKNown = false;
        } else {
            isKNown = (wkt.contains("MULTILINESTRING") || wkt.contains("LINESTRING") || wkt.contains("POLYGON") || wkt.contains("MULTIPOLYGON") || wkt.contains("POLYLINE") || wkt.contains("MULTIPOLYLINE") || wkt.contains("POINT") || wkt.contains("MULTIPOINT"));
        }
        return isKNown;
    }

    public static String checkStringGeometryClob(String clobString, String type) {
        type = type.split("_")[1];
        if (clobString.startsWith("(((", 0)) {
            int size = clobString.split(",")[0].split(" ").length;
            switch (size) {
                case 4:
                    clobString = type + " Z " + clobString;
                    break;
                case 5:
                    clobString = type + " ZM " + clobString;
                    break;
                default:
                    clobString = type + " " + clobString;
                    break;

            }

        } else if (clobString.startsWith("((", 0)) {
            int size = clobString.split(",")[0].split(" ").length;
            switch (size) {
                case 4:
                    clobString = type + " Z " + clobString;
                    break;
                case 5:
                    clobString = type + " ZM " + clobString;
                    break;
                default:
                    clobString = type + " " + clobString;
                    break;
            }

        } else if (clobString.startsWith("(", 0)) {
            if (clobString.contains(",")) {
                int size = clobString.split(",")[0].split(" ").length;
                switch (size) {
                    case 4:
                        clobString = type + " Z " + clobString;
                        break;
                    case 5:
                        clobString = type + " ZM " + clobString;
                        break;
                    default:
                        clobString = type + " " + clobString;
                        break;
                }
            } else {
                int size = clobString.split(" ").length;
                switch (size) {
                    case 4:
                        clobString = type + " Z " + clobString;
                        break;
                    case 5:
                        clobString = type + " ZM " + clobString;
                        break;
                    default:
                        clobString = type + " " + clobString;
                        break;
                }
            }

        }

        return clobString;
    }

}
