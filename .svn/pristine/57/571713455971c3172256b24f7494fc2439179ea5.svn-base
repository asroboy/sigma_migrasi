/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.migrationtool;

import com.sigma.big.model.db.DBConConfiguration;
import com.sigma.big.tools.DatabaseTool;
import com.sigma.big.tools.GeometryTool;
import com.sigma.big.tools.LogWriter;
import com.sigma.migrationtool.listener.DataChangedLIstener;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.WKTReader;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
//import org.gdal.ogr.DataSource;
//import org.gdal.ogr.Feature;
//import org.gdal.ogr.FeatureDefn;
//import org.gdal.ogr.Layer;
//import org.gdal.ogr.ogr;
import org.geotools.data.DataStore;
import org.geotools.data.DataStoreFinder;
import org.geotools.data.FeatureSource;
import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.simple.SimpleFeatureIterator;
import org.geotools.data.store.ContentFeatureCollection;
import org.geotools.data.store.ContentFeatureSource;
import org.geotools.feature.FeatureCollection;
import org.geotools.feature.FeatureIterator;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.opengis.filter.Filter;

/**
 *
 * @author user
 */
public class KetersediaanIndex extends javax.swing.JPanel {

    /**
     * Creates new form KetersediaanIndex
     */
    JFileChooser jf = null;
    AddDBConnectionNoSave addDBConnectionDialog;
    DBConConfiguration configurationSumber;
    private static final int CONNECTION_SUMBER_CODE = 1;
    LogWriter logger;
    private static final String KETERSEDIAN = "METADATA.KETERSEDIAAN_INDEX";

    public KetersediaanIndex() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbSkala = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtUpload = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnSimpan = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("Pilih Skala");

        cmbSkala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1:5.000", "1:10.000", "1.25.000", "1:100.000", "1:250.000", "1:500.000", "1:1.000.000" }));
        cmbSkala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSkalaActionPerformed(evt);
            }
        });

        jLabel2.setText("Upload Ketersediaan");

        btnBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_folder.png"))); // NOI18N
        btnBrowse.setText("Browse");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/ic_save.png"))); // NOI18N
        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_dbcon_25x.png"))); // NOI18N
        jButton1.setText("Koneksi database");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtUpload)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowse))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSkala, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(0, 168, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbSkala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtUpload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                getSumberIndexGeotools();
            }
        });

        t.start();
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("Shapefiles", "shp");
        jf = new JFileChooser();
        jf.setFileFilter(fnef);
        jf.showOpenDialog(null);
        txtUpload.setText(getPathSumber());

    }//GEN-LAST:event_btnBrowseActionPerformed

    private int getDataKetersediaan(String skala) throws IOException, SQLException {
        int count = 0;
        String sql = DatabaseTool.generateSQLCountKetersediaan(Integer.parseInt(skala));
        // print(sql);
        Connection conSumber = DatabaseTool.getConnection(configurationSumber, logger);
        try (Statement stmt = conSumber.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                count = rs.getInt("Jumlah");
            }
        }
        return count;

    }

    // method cek data
    private void print(String message) {
        System.out.println(message);
    }

    private void setConnection(int m_code) {
        DBConConfiguration cnf = null;
        if (m_code == CONNECTION_SUMBER_CODE) {
            cnf = configurationSumber;
        }
//        if (m_code == CONNECTION_TARGET_CODE) {
//            cnf = configurationTarget;
//        }
        if (addDBConnectionDialog == null) {
            AddDBConnection_ addDBConnection = new AddDBConnection_();
            addDBConnectionDialog = new AddDBConnectionNoSave(addDBConnection, true, listener_, cnf, m_code);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            addDBConnectionDialog.setLocation(dim.width / 2 - addDBConnectionDialog.getSize().width / 2, dim.height / 2 - addDBConnectionDialog.getSize().height / 2);
        }
        addDBConnectionDialog.reloadWithCode(
                cnf, m_code);
        addDBConnectionDialog.setVisible(
                true);
    }

    DataChangedLIstener listener_ = new DataChangedLIstener() {
        @Override
        public void onChanged() {
        }

        @Override
        public void doOnChanged(Object o) {
        }

        @Override
        public void doOnChanged(Object o, int code) {
            if (code == CONNECTION_SUMBER_CODE) {
                setConSumber((DBConConfiguration) o);

            }
//            if (code == CONNECTION_TARGET_CODE) {
//                setConTarget((DBConConfiguration) o);
//                //doMapping();
//                //getNamaProduk();
//            }
        }
    };

    private void setConSumber(DBConConfiguration con) {
        configurationSumber = new DBConConfiguration();
        configurationSumber.setName(con.getName());
        configurationSumber.setHost(con.getHost());
        configurationSumber.setPassword(con.getPassword());
        configurationSumber.setUsername(con.getUsername());
        configurationSumber.setPort(con.getPort());
        configurationSumber.setServiceName(con.getServiceName());
        configurationSumber.setSid(con.getSid());
        String url = DatabaseTool.generateUrl(configurationSumber);
        jLabel3.setText(url);
        System.out.println("URL : " + url);
//        jLabelKoneksiProduksi.setText(url);
//        updateViewsCon1(configurationSumber != null);

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
//        configurationSumber = new DBConConfiguration();
//
//        configurationSumber.setHost("localhost");
//        configurationSumber.setPort(1521);
//        configurationSumber.setSid("dbpsj");
//        configurationSumber.setUsername("system");
//        configurationSumber.setPassword("oracle123");

        //        configurationSumber.setHost("virtua.co.id");
        //        configurationSumber.setPort(1522);
        //        configurationSumber.setSid("igsver2");
        //        configurationSumber.setUsername("system");
        //        configurationSumber.setPassword("Virtua2017");
        setConnection(CONNECTION_SUMBER_CODE);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbSkalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSkalaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSkalaActionPerformed

    public String getPathSumber() {
        File _sumberIndex = jf.getSelectedFile();
        String namaSumber = _sumberIndex.getAbsolutePath();
        return namaSumber;
    }

    public void getSumberIndexOgr() {
//        String namaSumber = txtUpload.getText();
//        ArrayList<HashMap<String, Object>> sumberPacked = new ArrayList<>();
//        ogr.RegisterAll();
//        DataSource ds = ogr.Open(namaSumber, 1);
//        Layer layer = ds.GetLayer(0);
//        Object[] obj = new Object[1];
//        for (int i = 0; i < layer.GetFeatureCount(); i++) {
//            HashMap<String, Object> dataSumber = new HashMap<>();
//            Feature f = layer.GetNextFeature();
//            String nomorPeta = f.GetFieldAsString("NOMOR_PETA");
//            System.out.println("Nomor Peta Adalah : " + nomorPeta);
//        }

    }

    public void getSumberIndexGeotools() {
        try {
            jLabel4.setText("Memproses ...");
            String pathSumber = txtUpload.getText();
            System.out.println("PATH ===> " + pathSumber);
            ArrayList<HashMap<String, Object>> sumberPacked = new ArrayList<>();
            File file = new File(pathSumber);
            if (!file.exists() || !pathSumber.endsWith(".shp")) {
                try {
                    jLabel4.setText("Path shapefile tidak valid");
                    throw new Exception("Invalid shapefile filepath: " + pathSumber);
                } catch (Exception ex) {
                    Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            ShapefileDataStore dataStore = new ShapefileDataStore(file.toURI().toURL());
            ContentFeatureSource featureSource = dataStore.getFeatureSource();
//            ContentFeatureCollection featureCollection = featureSource.getFeatures();
            SimpleFeatureIterator iterator = featureSource.getFeatures().features();
            String nomorPeta;
            while (iterator.hasNext()) {
                HashMap<String, Object> dataSumber = new HashMap<>();
                SimpleFeature feature = iterator.next();
                nomorPeta = (String) feature.getAttribute("NOMOR_PETA");
                String namaPeta = (String) feature.getAttribute("NAMA_PETA");
                String region = (String) feature.getAttribute("REGION");
                Geometry geom = (Geometry) feature.getDefaultGeometry();
                //System.out.println(geom);
                jLabel4.setText("Memproses " + nomorPeta + " ...");

                WKTReader reader = new WKTReader();

                dataSumber.put("NOMOR_PETA", nomorPeta);
                dataSumber.put("NAMA_PETA", namaPeta);
                dataSumber.put("REGION", region);
                dataSumber.put("GEOM", geom);

                sumberPacked.add(dataSumber);
            }
            migrasiToOracle(sumberPacked);
        } catch (MalformedURLException ex) {
            jLabel4.setText("Path shapefile tidak valid");
            Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            jLabel4.setText("Path shapefile tidak valid");
            Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void migrasiToOracle(ArrayList<HashMap<String, Object>> dataSumber) {
        jLabel4.setText("Menyimpan data ...");
        int log = 0;
        String skala = GeometryTool.getSkala(cmbSkala.getSelectedItem().toString());
        try {
            Connection conSumber = DatabaseTool.getConnection(configurationSumber, logger);

            int dataKetersediaan = getDataKetersediaan(skala);
            if (dataKetersediaan > 0) {
                try {
                    conSumber.setAutoCommit(false);
                    String sqlDelete = DatabaseTool.generateDeleteKetersediaan();
                    PreparedStatement pstdel = conSumber.prepareStatement(sqlDelete);
                    pstdel.setInt(1, Integer.parseInt(skala));
                    pstdel.executeUpdate();
                    print("Record is deleted");
                    String sql = generateInsert();
                    PreparedStatement ps = conSumber.prepareStatement(sql);
                    // membuat variable hashmap baru untuk menampung HASHMAP datasumber
                    HashMap<Object, Object> newMap = new HashMap<Object, Object>();
                    for (HashMap<String, Object> each : dataSumber) {
                        newMap.put(each.get("NOMOR_PETA"), each);
                    }
                    // Dimasukan kedalam list hashmap untuk dibuang key yang duplicate
                    List<HashMap<String, Object>> noDuplicateList = new ArrayList<HashMap<String, Object>>();
                    for (Object each : newMap.keySet()) {
                        noDuplicateList.add((HashMap) newMap.get(each));
                    }
                    // DIBUAT LOOP LIST hasil yang sudah dibuang yang duplicate
                    for (int i = 0; i < noDuplicateList.size(); i++) {
                        Clob clob = conSumber.createClob();                        HashMap<String, Object> columnData = noDuplicateList.get(i);

                        clob.setString(1, ((Geometry) columnData.get("GEOM")).toString());
                        ps.setClob(1, clob);
                        ps.setString(2, (String) columnData.get("NOMOR_PETA"));
                        System.out.println(columnData.get("NOMOR_PETA"));
                        ps.setString(3, (String) columnData.get("NAMA_PETA"));
                        ps.setInt(4, Integer.parseInt((String) skala));
                        ps.setInt(5, 1);
                        ps.setString(6, (String) columnData.get("REGION"));
                        log = i;
                        ps.addBatch();
                    }
                    ps.executeBatch();
                    JOptionPane.showMessageDialog(null, "Data Berhasil Di Input");
                    conSumber.commit();
                } catch (SQLException e) {
                    Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, e);
                    System.out.println("Error : " + e);
                    conSumber.rollback();
                }
            } else {
                System.out.println(conSumber);
                String sql = generateInsert();
                PreparedStatement ps = conSumber.prepareStatement(sql);
                // membuat variable hashmap baru untuk menampung HASHMAP datasumber
                HashMap<Object, Object> newMap = new HashMap<Object, Object>();
                for (HashMap<String, Object> each : dataSumber) {
                    newMap.put(each.get("NOMOR_PETA"), each);
                }
                // Dimasukan kedalam list hashmap untuk dibuang key yang duplicate
                List<HashMap<String, Object>> noDuplicateList = new ArrayList<HashMap<String, Object>>();
                for (Object each : newMap.keySet()) {
                    noDuplicateList.add((HashMap) newMap.get(each));
                }
                // DIBUAT LOOP LIST hasil yang sudah dibuang yang duplicate
                for (int i = 0; i < noDuplicateList.size(); i++) {
                    HashMap<String, Object> columnData = noDuplicateList.get(i);
                    Clob clob = conSumber.createClob();
                    clob.setString(1, ((Geometry) columnData.get("GEOM")).toString());
                    ps.setClob(1, clob);
                    ps.setString(2, (String) columnData.get("NOMOR_PETA"));
                    System.out.println(columnData.get("NOMOR_PETA"));
                    ps.setString(3, (String) columnData.get("NAMA_PETA"));
                    ps.setInt(4, Integer.parseInt((String) skala));
                    ps.setInt(5, 1);
                    ps.setString(6, (String) columnData.get("REGION"));
                    log = i;
                    ps.addBatch();
                }
                ps.executeBatch();
                JOptionPane.showMessageDialog(null, "Data Berhasil Di Input");
            }

        } catch (IOException ex) {
            Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(KetersediaanIndex.class.getName()).log(Level.SEVERE, null, ex);
            //  txtLog.setText(dataSumber.get(log).get("NOMOR_PETA").toString() + "Sudah ada");

        }

        jLabel4.setText("");
    }

    public String generateInsert() {
        String sql = "declare \n"
                + "xgeom sdo_geometry; \n"
                + "begin \n"
                + "xgeom := SDO_UTIL.FROM_WKTGEOMETRY(?); \n"
                + "xgeom.sdo_srid:=4326; \n";
        sql += "INSERT INTO " + KETERSEDIAN + "(SHAPE,NOMOR_PETA,NAMA_PETA,SKALA,STATUS,REGION";
        sql += ") VALUES (xgeom,?,?,?,?,?);\n";
        sql += "end;";
        return sql;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JComboBox<String> cmbSkala;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtUpload;
    // End of variables declaration//GEN-END:variables
}
