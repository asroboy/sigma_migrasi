/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.migrationtool;

import com.sigma.migrationtool.listener.DataChangedLIstener;
import com.sigma.big.model.db.DBConConfiguration;
import com.sigma.big.tools.DatabaseTool;
import com.sigma.big.tools.LogWriter;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ridho
 */
public class ValidasiMetadata extends javax.swing.JPanel {

    private static final int CONNECTION_SUMBER_CODE = 1;
    private static final int CONNECTION_TARGET_CODE = 2;
    DBConConfiguration configurationSumber;
    DBConConfiguration configurationTarget;
    AddDBConnectionNoSave addDBConnectionDialog;
    LogWriter logger;

    /**
     * Creates new form ValidasiMetadata
     */
    public ValidasiMetadata() {
        initComponents();
        buttonCheckIntegrity.setEnabled(false);

        Color customGreen = new Color(39, 139, 80);
        progressBar.setForeground(customGreen);
        progressBar.setUI(new MyProgressUI());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonCheckIntegrity = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPaneLog = new javax.swing.JTextPane();
        progressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        labelKoneksiSumber = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        labelKoneksiTarget = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        buttonCheckIntegrity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_play.png"))); // NOI18N
        buttonCheckIntegrity.setText("CEK INTEGRITAS");
        buttonCheckIntegrity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCheckIntegrityActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(textPaneLog);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Koneksi Development"));

        labelKoneksiSumber.setText("Koneksi sumber:");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_dbcon_25x.png"))); // NOI18N
        jButton1.setText("Koneksi DB Development");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelKoneksiSumber, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelKoneksiSumber)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Koneksi Produksi"));

        labelKoneksiTarget.setText("Koneksi target:");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_dbcon_25x.png"))); // NOI18N
        jButton2.setText("Koneksi DB Produksi");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelKoneksiTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelKoneksiTarget)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonCheckIntegrity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonCheckIntegrity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        TODO add your handling code here:
//        HARDCODED DEVELOPMENT ONLY
//        configurationSumber = new DBConConfiguration();
//        configurationSumber.setHost("localhost");
//        configurationSumber.setPort(1521);
//        configurationSumber.setSid("migrasisde");
//        configurationSumber.setUsername("sde");
//        configurationSumber.setPassword("sde");
        //============
        setConnection(CONNECTION_SUMBER_CODE);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//        HARDCODED DEVELOPMENT ONLY
//        configurationTarget = new DBConConfiguration();
//        configurationTarget.setHost("localhost");
//        configurationTarget.setPort(1521);
//        configurationTarget.setSid("orcl");
//        configurationTarget.setUsername("system");
//        configurationTarget.setPassword("root123");
        //============
        setConnection(CONNECTION_TARGET_CODE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void buttonCheckIntegrityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCheckIntegrityActionPerformed
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                checkIntegrity();
            }
        });
        t.start();

    }//GEN-LAST:event_buttonCheckIntegrityActionPerformed

    private void checkIntegrity() {
        try {
            textPaneLog.setText("");
            DatabaseTool dbTool = new DatabaseTool();
            logger = new LogWriter("CEK_INTEGRITAS");
            logger.writeToTextArea(textPaneLog);

            logger.log(LogWriter.INFO, "Mulai periksa integritas..");
            Connection conn = DatabaseTool.getConnection(configurationSumber, logger);
            Connection connTarget = DatabaseTool.getConnection(configurationTarget, logger);
            ArrayList<String> unsurs = getDaftarUnsur(conn);
            logger.log(LogWriter.INFO, "---------------------------------------------");
            logger.log(LogWriter.INFO, "Memeriksa METADATA pada tiap-tiap unsur");
            logger.log(LogWriter.INFO, "---------------------------------------------");
            progressBar.setMaximum(unsurs.size());
            int i = 1;
            int k = 1;
            for (String unsur : unsurs) {
                if (isUnsurHasMetadata(dbTool, unsur, conn)) {
                    logger.log(LogWriter.INFO, i + ". Unsur : " + unsur);
                    String sql = dbTool.generateSQLGetMetadataFromUnsur(configurationSumber.getUsername(), unsur);
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery(sql);
                    int j = 0;
                    logger.log(LogWriter.INFO, "METADATA :");
                    while (rs.next()) {
                        j++;
                        logger.log(LogWriter.INFO, " " + "--> " + rs.getString("METADATA"));
                        String fileIdentifier = rs.getString("METADATA");
                        if (fileIdentifier == null) {
                            logger.log(LogWriter.ERROR, "  METADATA null");
                        } else {
                            if (isFileIdentifierExist(dbTool, fileIdentifier, connTarget)) {
                                logger.log(LogWriter.DEBUG, "  METADATA valid");
                            } else {
                                logger.log(LogWriter.ERROR, "  METADATA tidak ditemukan");
                            }
                        }
                    }

                    if (j == 0) {
                        logger.log(LogWriter.ERROR, "  METADATA null");
                    }
                    stmt.close();
                    logger.log(LogWriter.INFO, "---------------------------");
                    i++;
                }

                progressBar.setValue(k);
                k++;
            }

            System.out.print("k " + k);
            System.out.print("size " + unsurs.size());

            if (k == (unsurs.size() + 1)) {
                checkMetadataIntegirty(conn, connTarget, unsurs);
            }
        } catch (IOException ex) {
            Logger.getLogger(ValidasiMetadata.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ValidasiMetadata.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkMetadataIntegirty(Connection conSumber, Connection conTarget, ArrayList<String> unsurs) throws SQLException, IOException {
        DatabaseTool dbTool = new DatabaseTool();
        logger.log(LogWriter.INFO, "---------------------------------------------");
        logger.log(LogWriter.INFO, "Memeriksa FILE IDENTIFIER pada Tabel METADATA");
        logger.log(LogWriter.INFO, "---------------------------------------------");

        ArrayList<String> fileIdent = getFileIdentifiers(conTarget, dbTool);
        progressBar.setMaximum(fileIdent.size());
        int j = 1;
        for (String fileIdentifier : fileIdent) {
            boolean isMetadataValid = false;
            for (String unsur : unsurs) {
                if (isUnsurHasMetadata(dbTool, unsur, conSumber)) {
                    if (isMetadataValid) {
                        break;
                    } else {
                        String sql = dbTool.generateSQLGetMetadataCountInsideUnsur(configurationSumber.getUsername(), unsur, fileIdentifier);
                        Statement stmt = conSumber.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                        while (rs.next()) {
                            int count = rs.getInt("COUNT");
                            if (count > 0) {
                                isMetadataValid = true;
                            }
                        }
                        stmt.close();
                    }
                }
            }

            if (!isMetadataValid) {
                logger.log(LogWriter.INFO, "File Identifier : " + fileIdentifier);
                logger.log(LogWriter.ERROR, "DATA tidak ditemukan");
            } else {
                logger.log(LogWriter.INFO, "File Identifier : " + fileIdentifier);
                logger.log(LogWriter.DEBUG, "DATA ditemukan");
            }

            progressBar.setValue(j);
            j++;
        }

        conSumber.close();
        conTarget.close();
        logger.log(LogWriter.INFO, "==== SELESAI ===");
    }

    private ArrayList<String> getFileIdentifiers(Connection con, DatabaseTool dbTool) throws SQLException {
        String sql = dbTool.generateSQLGetFileIdentifierFromMdMetadata();
        System.err.println(sql);
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        ArrayList<String> fileIdent = new ArrayList<>();
        while (rs.next()) {
            fileIdent.add(rs.getString("FILEIDENTIFIER"));
        }
        stmt.close();
        return fileIdent;
    }

    private boolean isUnsurHasMetadata(DatabaseTool dbTool, String namaUnsur, Connection conn) throws SQLException {
        String sql = dbTool.generateSQLGetFieldIsMetadata(namaUnsur);
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(sql);
        boolean has = rs.next();
        st.close();
        return has;
    }

    private boolean isFileIdentifierExist(DatabaseTool dbTool, String fielIdentifier, Connection conn) throws SQLException {
        String sql = dbTool.generateSQLGetFileIdentfifierWhereEquals(fielIdentifier);
        Statement st = conn.createStatement();
        ResultSet rs = st.executeQuery(sql);
        boolean has = rs.next();
        st.close();
        return has;
    }

    public ArrayList<String> getDaftarUnsur(Connection conn) throws SQLException {
        ArrayList<String> tables = new ArrayList<>();
        String sql = "select TABLE_NAME from user_tables";
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(sql);
        while (rs.next()) {
            String tableName = rs.getString("TABLE_NAME");
            tables.add(tableName);
        }
        stmt.close();
        return tables;
    }

    private void setConnection(int m_code) {
        DBConConfiguration cnf = null;
        if (m_code == CONNECTION_SUMBER_CODE) {
            cnf = configurationSumber;
        }
        if (m_code == CONNECTION_TARGET_CODE) {
            cnf = configurationTarget;
        }
        if (addDBConnectionDialog == null) {
            AddDBConnection_ addDBConnection = new AddDBConnection_();
            addDBConnectionDialog = new AddDBConnectionNoSave(addDBConnection, true, connectionListener, cnf, m_code);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            addDBConnectionDialog.setLocation(dim.width / 2 - addDBConnectionDialog.getSize().width / 2, dim.height / 2 - addDBConnectionDialog.getSize().height / 2);
        }
        addDBConnectionDialog.reloadWithCode(
                cnf, m_code);
        addDBConnectionDialog.setVisible(
                true);
    }

    DataChangedLIstener connectionListener = new DataChangedLIstener() {
        @Override
        public void onChanged() {
        }

        @Override
        public void doOnChanged(Object o) {
        }

        @Override
        public void doOnChanged(Object o, int code) {
            if (code == CONNECTION_SUMBER_CODE) {
                setConnection(CONNECTION_SUMBER_CODE, (DBConConfiguration) o);

            }
            if (code == CONNECTION_TARGET_CODE) {
                setConnection(CONNECTION_TARGET_CODE, (DBConConfiguration) o);
            }
            buttonCheckIntegrity.setEnabled((configurationTarget != null && configurationSumber != null));
        }
    };

    private void setConnection(int code, DBConConfiguration con) {
        if (code == CONNECTION_TARGET_CODE) {
            configurationTarget = con;
            String url = DatabaseTool.generateUrl(configurationTarget);
            System.out.println("URL : " + url);
            labelKoneksiTarget.setText(url);
        }

        if (code == CONNECTION_SUMBER_CODE) {
            configurationSumber = con;
            String url = DatabaseTool.generateUrl(configurationSumber);
            System.out.println("URL : " + url);
            labelKoneksiSumber.setText(url);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCheckIntegrity;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelKoneksiSumber;
    private javax.swing.JLabel labelKoneksiTarget;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextPane textPaneLog;
    // End of variables declaration//GEN-END:variables
}
