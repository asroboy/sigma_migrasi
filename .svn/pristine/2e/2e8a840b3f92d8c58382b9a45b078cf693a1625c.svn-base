package com.sigma.big.utils;

import com.esri.core.geometry.*;

import java.nio.ByteBuffer;
/**
 * User: schullto
 * Date: 25/12/2014
 * Time: 8:04 PM
 */
public class WktWkbUtil {
    public static Geometry fromWkt(String wkt) {
        if (wkt.indexOf("#QNAN") > 0) {
            //wkt = MULTILINESTRING M (( 81456.03123400 104970.70314900 1.#QNAN000, 81490.81246800 105031.39848950 1.#QNAN000, 81528.67191500 105094.20314900 1.#QNAN000, 81579.14068100 105164.50000000 1.#QNAN000, 81614.50000000 105227.29685100 1.#QNAN000, 81619.64068100 105287.60151050 1.#QNAN000, 81624.81246800 105355.29685100 1.#QNAN000, 81657.65629800 105425.60151050 1.#QNAN000, 81695.53123400 105488.39848950 1.#QNAN000, 81746.06246800 105588.89848950 1.#QNAN000, 81811.75000000 105722.00000000 1.#QNAN000, 81831.00000000 105779.60151050 1.#QNAN000, 81867.32808500 105835.00000000 1.#QNAN000, 81973.28123400 105968.29685100 1.#QNAN000, 82109.50000000 106134.20314900 1.#QNAN000, 82164.95314900 106187.00000000 1.#QNAN000, 82205.27342550 106207.20314900 1.#QNAN000, 82258.17191500 106240.00000000 1.#QNAN000, 82677.21236559 106126.86200717 1.#QNAN000, 82436.91385049 106348.67601126 1.#QNAN000, 82510.43753200 106554.20314900 1.#QNAN000, 82626.46876600 106700.00000000 1.#QNAN000, 82661.79685100 106750.20314900 1.#QNAN000, 82646.79685100 106795.29685100 1.#QNAN000, 82604.21876600 106900.60151050 1.#QNAN000, 82569.20314900 107010.89848950 1.#QNAN000, 82556.75000000 107076.00000000 1.#QNAN000, 82555.67844342 107076.10983103 1.#QNAN000, 82508.95314900 107080.89848950 1.#QNAN000, 82468.75000000 107115.89848950 1.#QNAN000, 82358.07808500 107138.20314900 1.#QNAN000, 82262.45314900 107140.50000000 1.#QNAN000, 82204.57808500 107142.79685100 1.#QNAN000, 82204.46876600 107090.10151050 1.#QNAN000, 82191.78123400 107034.89848950 1.#QNAN000, 82156.52342550 107014.79685100 1.#QNAN000, 82116.22657450 107009.60151050 1.#QNAN000, 82081.09370200 107052.20314900 1.#QNAN000, 82046.06246800 107157.39848950 1.#QNAN000, 82013.59370200 107275.20314900 1.#QNAN000, 82001.52342550 107538.60151050 1.#QNAN000, 81996.78123400 107686.60151050 1.#QNAN000, 81984.43753200 107814.50000000 1.#QNAN000, 81989.64068100 107899.79685100 1.#QNAN000, 81967.15629800 107980.00000000 1.#QNAN000, 81937.13287250 108065.20314900 1.#QNAN000, 81919.64068100 108132.79685100 1.#QNAN000, 81942.40629800 108190.60151050 1.#QNAN000, 81956.44470046 108229.32526882 1.#QNAN000, 81965.17191500 108253.39848950 1.#QNAN000, 81962.81246800 108336.10151050 1.#QNAN000, 81960.50000000 108439.00000000 1.#QNAN000, 81986.10931900 108510.60151050 1.#QNAN000, 81943.15629800 108576.89848950 1.#QNAN000, 81900.53123400 108652.00000000 1.#QNAN000, 81858.14068100 108704.79685100 1.#QNAN000),( 82134.20314900 109864.39848950 1.#QNAN000, 82080.07808500 109904.20314900 1.#QNAN000, 82012.20314900 109934.10151050 1.#QNAN000, 81979.47657450 109926.50000000 1.#QNAN000, 81914.14068100 109956.39848950 1.#QNAN000, 81806.13287250 110031.29685100 1.#QNAN000, 81720.67191500 110073.70314900 1.#QNAN000, 81592.53123400 110153.60151050 1.#QNAN000, 81519.78123400 110246.20314900 1.#QNAN000, 81441.96876600 110326.29685100 1.#QNAN000, 81386.78123400 110401.39848950 1.#QNAN000, 81326.40629800 110403.70314900 1.#QNAN000, 81238.40629800 110431.00000000 1.#QNAN000, 81122.71876600 110453.20314900 1.#QNAN000, 80994.54685100 110520.50000000 1.#QNAN000, 80944.32808500 110560.50000000 1.#QNAN000, 80896.50000000 110552.79685100 1.#QNAN000, 80773.14068100 110517.20314900 1.#QNAN000, 80662.32808500 110469.10151050 1.#QNAN000, 80596.79685100 110418.60151050 1.#QNAN000, 80533.79685100 110368.20314900 1.#QNAN000, 80468.29685100 110332.79685100 1.#QNAN000, 80420.53123400 110352.70314900 1.#QNAN000, 80360.13287250 110339.89848950 1.#QNAN000, 80292.07808500 110286.89848950 1.#QNAN000, 80279.43753200 110261.79685100 1.#QNAN000, 80302.06246800 110254.29685100 1.#QNAN000, 80390.00000000 110194.39848950 1.#QNAN000, 80359.71876600 110159.10151050 1.#QNAN000, 80309.35931900 110136.29685100 1.#QNAN000, 80284.28123400 110173.89848950 1.#QNAN000, 80241.59370200 110213.89848950 1.#QNAN000, 80201.93753200 110214.79685100 1.#QNAN000))
            return null;
        }
        return OperatorImportFromWkt.local().execute(WktImportFlags.wktImportDefaults, Geometry.Type.Unknown, wkt, null);
        /*
        --JTS--
        try {
            if (wkt.startsWith("MULTILINESTRING M ")) {
                wkt = "MULTILINESTRING " + wkt.substring(17);
            }
            if (wkt.startsWith("LINESTRING M ")) {
                wkt = "LINESTRING " + wkt.substring(12);
            }
            WKTReader reader = new WKTReader();
            geom = reader.read(wkt);
        } catch (ParseException e) {
            return null;
        }
         */
    }

    public static Geometry fromWkb(byte[] wkb) {
        return OperatorImportFromWkb.local().execute(WkbImportFlags.wkbImportDefaults, Geometry.Type.Unknown, ByteBuffer.wrap((byte[]) wkb), null);
        /*
        --JTS--
        WKBReader wkbReader = new WKBReader();
        try {
            Geometry geom = wkbReader.read((byte[]) object);
            return geom;
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
        */

    }

    
    public static String toWkt(Geometry geometry) {
        String wktGeom = OperatorExportToWkt.local().execute(WktExportFlags.wktExportDefaults, geometry, null);
        /*
        ---JTS---
        String wktGeom = geom.toText();
        */
        return wktGeom;
    }

    public static byte[] toWkb(Geometry geometry) {
        ByteBuffer byteBuffer= OperatorExportToWkb.local().execute(WkbExportFlags.wkbExportDefaults, geometry, null);
        byte[] bytes =byteBuffer.array();
        /*
        ---JTS---
        WKBWriter wkbWriter = new WKBWriter();
        byte[] bytes =wkbWriter.write(geom);
        */
        return bytes;

    }
}