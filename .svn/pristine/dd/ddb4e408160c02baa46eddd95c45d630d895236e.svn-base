/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.migrationtool.bkp;

import com.sigma.big.controller.DBConConfigurationController;
import com.sigma.big.model.db.DBConConfiguration;
import com.sigma.big.utils.Activity;
import com.sigma.big.utils.ButtonCellClickedListener;
import com.sigma.big.utils.ButtonEditor;
import com.sigma.big.utils.ButtonRenderer;
import com.sigma.bigmigrasi.db.DBUtil;
import com.sigma.migrationtool.AddDBConnection;
import com.sigma.migrationtool.AddDBConnection_;
import com.sigma.migrationtool.listener.DataChangedLIstener;
import com.sigma.migrationtool.MainFrame;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ridho
 */
public class KelolaKoneksiDatabase extends javax.swing.JPanel implements DataChangedLIstener, Activity {

    /**
     * Creates new form KelolaKoneksiDatabaseridho
     */
    DBConConfigurationController dBConConfigurationController;
    ArrayList<DBConConfiguration> dbConConfs;
    AddDBConnection addDBConnectionDialog;

    public KelolaKoneksiDatabase() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textFieldCari = new javax.swing.JTextField();
        btCari = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Kelola Koneksi Database");

        btCari.setText("Cari");
        btCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCariActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nama Koneksi", "Host", "Nama Service", "SID", "Update", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(20);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(10);
        }

        jButton1.setText("Tambah");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textFieldCari, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCari)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFieldCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCari)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (addDBConnectionDialog == null) {
            AddDBConnection_ addDBConnection = new AddDBConnection_();
            addDBConnectionDialog = new AddDBConnection(addDBConnection, true, this, null);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            addDBConnectionDialog.setLocation(dim.width / 2 - addDBConnectionDialog.getSize().width / 2, dim.height / 2 - addDBConnectionDialog.getSize().height / 2);
        }

        addDBConnectionDialog.reload(null);
        addDBConnectionDialog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCariActionPerformed
        // TODO add your handling code here:
        try {
            if (dBConConfigurationController == null) {
                dBConConfigurationController = new DBConConfigurationController(new DBUtil());
            }
            dbConConfs = dBConConfigurationController.findByConnectionName(textFieldCari.getText());

        } catch (SQLException ex) {
            Logger.getLogger(KelolaKoneksiDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateTable();
    }//GEN-LAST:event_btCariActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCari;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField textFieldCari;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onChanged() {
        loadConnections();
        updateTable();
    }

    public void updateTable() {
        int i = 0;
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(dbConConfs.size());
        jTable1.setModel(dtm);

        for (DBConConfiguration dbConConf : dbConConfs) {
            jTable1.getModel().setValueAt(dbConConf.getName(), i, 0);
            jTable1.getModel().setValueAt(dbConConf.getHost(), i, 1);
            jTable1.getModel().setValueAt(dbConConf.getServiceName(), i, 2);
            jTable1.getModel().setValueAt(dbConConf.getSid(), i, 3);
            jTable1.getModel().setValueAt(new JButton("Delete"), i, 4);
            i++;
        }
    }

    @Override
    public void doOnChanged(Object o) {
    }

    @Override
    public void onStart() {

        loadConnections();

        int i = 0;
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(dbConConfs.size());
        jTable1.setModel(dtm);
        jTable1.getColumn("Update").setCellRenderer(new ButtonRenderer("Edit"));
        jTable1.getColumn("Update").setCellEditor(
                new ButtonEditor(new JCheckBox(), "Edit", new ButtonCellClickedListener() {
                    @Override
                    public void onClick(int code, int row) {
                        System.out.println("ROW " + row);
                        System.out.println("dbConConfs SIZE " + dbConConfs.size());
                        // TODO add your handling code here:
                        if (addDBConnectionDialog == null) {
                            AddDBConnection_ addDBConnection = new AddDBConnection_();
                            DBConConfiguration dBConConfiguration = dbConConfs.get((Integer) row);
                            addDBConnectionDialog = new AddDBConnection(addDBConnection, true, KelolaKoneksiDatabase.this, dBConConfiguration);

                            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
                            addDBConnectionDialog.setLocation(dim.width / 2 - addDBConnectionDialog.getSize().width / 2, dim.height / 2 - addDBConnectionDialog.getSize().height / 2);

                        } else {
                            DBConConfiguration dBConConfiguration = dbConConfs.get((Integer) row);
                            addDBConnectionDialog.reload(dBConConfiguration);
                        }

                        addDBConnectionDialog.setVisible(true);
                    }

                }, 1));

        jTable1.getColumn("Delete").setCellRenderer(new ButtonRenderer("Delete"));
        jTable1.getColumn("Delete").setCellEditor(
                new ButtonEditor(new JCheckBox(), "Delete", new ButtonCellClickedListener() {

                    @Override
                    public void onClick(int code, int row) {

                        int reply = JOptionPane.showConfirmDialog(null, "Apakah anda yakin menghaspus data ini ?", "Perhatian", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION) {
                            try {
                                System.out.println("getTableCellEditorComponent");
                                DBConConfigurationController conConfigurationController = new DBConConfigurationController(new DBUtil());
                                DBConConfiguration dBConConfiguration = dbConConfs.get((Integer) row);
                                conConfigurationController.delete(dBConConfiguration);

                                onChanged();
                            } catch (SQLException ex) {
                                Logger.getLogger(KelolaKoneksiDatabase.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(KelolaKoneksiDatabase.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {

                        }

                    }
                }, 1));

        for (DBConConfiguration dbConConf : dbConConfs) {
            jTable1.getModel().setValueAt(dbConConf.getName(), i, 0);
            jTable1.getModel().setValueAt(dbConConf.getHost(), i, 1);
            jTable1.getModel().setValueAt(dbConConf.getServiceName(), i, 2);
            jTable1.getModel().setValueAt(dbConConf.getSid(), i, 3);
//            jTable1.getModel().setValueAt(new JButton("Delete"), i, 4);
            i++;
        }
    }

    @Override
    public void onPause() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onResume() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void loadConnections() {
        try {
            if (dBConConfigurationController == null) {
                dBConConfigurationController = new DBConConfigurationController(new DBUtil());
            }
            dbConConfs = dBConConfigurationController.getConnectionConfigurations();

        } catch (SQLException ex) {
            Logger.getLogger(KelolaKoneksiDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void doOnChanged(Object o, int code) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
