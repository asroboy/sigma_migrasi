/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.migrationtool;

import com.sigma.big.model.KeterseidaanIndex;
import com.sigma.big.model.db.Attributes;
import com.sigma.big.model.db.DBConConfiguration;
import com.sigma.big.model.db.Mapping;
import com.sigma.big.model.db.Project;
import com.sigma.big.tools.DatabaseTool;
import com.sigma.big.tools.ExcelReader;
import com.sigma.big.tools.GeometryTool;
import com.sigma.big.tools.LogWriter;
import com.sigma.big.tools.MigrasiShapeHelper;
import com.sigma.big.tools.Unsur;
import com.sigma.big.utils.Activity;
import com.sigma.migrationtool.listener.DataChangedLIstener;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.io.oracle.OraReader;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import libraries.xml.XmlMetadataWriter;
import oracle.sql.STRUCT;

/**
 *
 * @author Ridho
 */
public class MigrasiProdToPubNew extends javax.swing.JPanel implements Activity {

    DBConConfiguration configurationSumber, configurationTarget;
    final int CONNECTION_SUMBER_CODE = 1;
    final int CONNECTION_TARGET_CODE = 2;
    AddDBConnectionNoSave addDBConnectionDialog;
    String defaultMappingPath = "C:\\migrasi\\data\\Mapping Publikasi\\RBI5K_PUB5K.xls";
    ArrayList<Unsur> unsursHash;
    ArrayList<Project> namaProject, projects;
    HashMap<String, ArrayList<String>> nlpListForUnsur;
    Connection conSumber, conTarget;
    String fileIdentifierBaruRelease;
    HashMap<String, String> unsurTermigrasi;
    LogWriter logger;
    boolean changeCheckBoxStatus = false;

    private final String KEY_NOMOR_PETA = "NOMOR_PETA";
    private final String KEY_FILEINDENTIFIER = "FILEIDENTIFIER";
    private final String KEY_TITLE = "TITLE";
    private final String KEY_NAMA_UNSURS = "SPECIFICATION";
    private final String KEY_NLPS = "SUPLEMENTATIONINFORMATION";
    private final String KEY_DATE = "DATE_";
    private final String KEY_GTYPE = "G_TYPE";

    /**
     * Creates new form MigrasiProdToPubNew
     */
    public MigrasiProdToPubNew() {
        initComponents();
        jTextMapping.setText(defaultMappingPath);
        Calendar cal = Calendar.getInstance();
        Date now = cal.getTime();
        cal.add(Calendar.YEAR, -100);
        Date startDate = cal.getTime();
        cal.add(Calendar.YEAR, 300);
        Date endDate = cal.getTime();
        SpinnerDateModel model = new SpinnerDateModel(now, startDate, endDate, Calendar.YEAR);
        spinnerTahunMulai.setModel(model);
        JSpinner.DateEditor d = new JSpinner.DateEditor(spinnerTahunMulai, "yyyy");
        spinnerTahunMulai.setEditor(d);

        SpinnerDateModel model2 = new SpinnerDateModel(now, startDate, endDate, Calendar.YEAR);
        spinnerTahunSampai.setModel(model2);
        JSpinner.DateEditor d2 = new JSpinner.DateEditor(spinnerTahunSampai, "yyyy");
        spinnerTahunSampai.setEditor(d2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButtonKoneksiSumber = new javax.swing.JButton();
        jLabelKoneksiSumber = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButtonKoneksiTarget = new javax.swing.JButton();
        jLabelKoneksiTarget = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxProduk = new javax.swing.JComboBox<>();
        jTextMapping = new javax.swing.JTextField();
        buttonBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboBoxSkala = new javax.swing.JComboBox<>();
        spinnerTahunMulai = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnerTahunSampai = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelProyek = new javax.swing.JTable();
        buttonRefresh = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelUnsur = new javax.swing.JTable();
        buttonMigrasi = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPaneLog = new javax.swing.JTextPane();
        checkBoxSemua = new javax.swing.JCheckBox();

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Koneksi Sumber"));

        jButtonKoneksiSumber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_dbcon.png"))); // NOI18N
        jButtonKoneksiSumber.setText("Koneksi Sumber");
        jButtonKoneksiSumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKoneksiSumberActionPerformed(evt);
            }
        });

        jLabelKoneksiSumber.setText("Koneksi");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonKoneksiSumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelKoneksiSumber, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonKoneksiSumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelKoneksiSumber)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Koneksi Target"), "Koneksi Target"));

        jButtonKoneksiTarget.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_dbcon.png"))); // NOI18N
        jButtonKoneksiTarget.setText("Koneksi Target");
        jButtonKoneksiTarget.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonKoneksiTargetActionPerformed(evt);
            }
        });

        jLabelKoneksiTarget.setText("Koneksi");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonKoneksiTarget, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelKoneksiTarget, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonKoneksiTarget)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelKoneksiTarget)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("File Mapping");

        jComboBoxProduk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RBI", "LLN", "LPI", "JKG" }));

        jTextMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextMappingActionPerformed(evt);
            }
        });

        buttonBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_folder.png"))); // NOI18N
        buttonBrowse.setText("Browse");
        buttonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Produk");

        jLabel3.setText("Skala");

        comboBoxSkala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1:5.000", "1:10.000", "1.25.000", "1:100.000", "1:250.000", "1:500.000", "1:1.000.000" }));

        jLabel4.setText("Range Tahun");

        tabelProyek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pilih", "Project", "Metadata", "Tahun"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelProyek);
        if (tabelProyek.getColumnModel().getColumnCount() > 0) {
            tabelProyek.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        tabelUnsur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pilih", "Unsur", "Metadata", "Tahun", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelUnsur);
        if (tabelUnsur.getColumnModel().getColumnCount() > 0) {
            tabelUnsur.getColumnModel().getColumn(0).setPreferredWidth(5);
        }

        buttonMigrasi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icon_play.png"))); // NOI18N
        buttonMigrasi.setText("Migrasi");
        buttonMigrasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMigrasiActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/filter.png"))); // NOI18N
        jButton1.setText("Jalankan Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jTextPaneLog);

        checkBoxSemua.setText("Semua");
        checkBoxSemua.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxSemuaItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(buttonRefresh)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkBoxSemua))
                    .addComponent(jScrollPane3)
                    .addComponent(buttonMigrasi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxProduk, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jTextMapping, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonBrowse)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(comboBoxSkala, javax.swing.GroupLayout.Alignment.LEADING, 0, 160, Short.MAX_VALUE)
                                    .addComponent(spinnerTahunMulai, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spinnerTahunSampai, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextMapping, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxProduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxSkala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTahunMulai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(spinnerTahunSampai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRefresh)
                    .addComponent(checkBoxSemua))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonMigrasi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane4.setViewportView(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonKoneksiSumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKoneksiSumberActionPerformed
        // TODO add your handling code here:
        setConnection(CONNECTION_SUMBER_CODE);
    }//GEN-LAST:event_jButtonKoneksiSumberActionPerformed

    private void buttonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBrowseActionPerformed
        chooseFile();
    }//GEN-LAST:event_buttonBrowseActionPerformed

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed
        // TODO add your handling code here:
//        checkBoxSemua.setSelected(true);
        doMapping();
    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void jButtonKoneksiTargetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonKoneksiTargetActionPerformed
        // TODO add your handling code here:
        setConnection(CONNECTION_TARGET_CODE);
    }//GEN-LAST:event_jButtonKoneksiTargetActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ambilDaftarUsnurBerdasarSkalaTahun();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buttonMigrasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMigrasiActionPerformed
        doMigrasiData();
    }//GEN-LAST:event_buttonMigrasiActionPerformed

    private void checkBoxSemuaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxSemuaItemStateChanged
        // TODO add your handling code here:
        boolean isSelected = (evt.getStateChange() == 1);
        int row = 0;
        println("CHECK BOX SEMUA " + isSelected);
        if (!changeCheckBoxStatus) {
            if (unsursHash != null) {
                for (Unsur unsur : unsursHash) {
                    unsur.setSelected(isSelected);
                    unsursHash.set(row, unsur);
                    row++;
                }
                updateTableUnsur(unsursHash.size());
            }
        }

    }//GEN-LAST:event_checkBoxSemuaItemStateChanged

    private void jTextMappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMappingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextMappingActionPerformed

    @Override
    public void onStart() {

    }

    @Override
    public void onPause() {

    }

    @Override
    public void onResume() {

    }

    private void setConnection(int m_code) {
        DBConConfiguration cnf = null;
        if (m_code == CONNECTION_SUMBER_CODE) {
//            configurationSumber = new DBConConfiguration();
//            configurationSumber.setHost("");
//            configurationSumber.setPort(1521);
//            configurationSumber.setSid("");
//            configurationSumber.setUsername("");
//            configurationSumber.setPassword("");
            cnf = configurationSumber;
        }
        if (m_code == CONNECTION_TARGET_CODE) {
//            configurationTarget = new DBConConfiguration();
//            configurationTarget.setHost("");
//            configurationTarget.setPort(1521);
//            configurationTarget.setSid("");
//            configurationTarget.setUsername("");
//            configurationTarget.setPassword("");
            cnf = configurationTarget;
        }
        if (addDBConnectionDialog == null) {
            AddDBConnection_ addDBConnection = new AddDBConnection_();
            addDBConnectionDialog = new AddDBConnectionNoSave(addDBConnection, true, listener_, cnf, m_code);
            Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
            addDBConnectionDialog.setLocation(dim.width / 2 - addDBConnectionDialog.getSize().width / 2, dim.height / 2 - addDBConnectionDialog.getSize().height / 2);
        }
        addDBConnectionDialog.reloadWithCode(
                cnf, m_code);
        addDBConnectionDialog.setVisible(
                true);
    }

    DataChangedLIstener listener_ = new DataChangedLIstener() {
        @Override
        public void onChanged() {
        }

        @Override
        public void doOnChanged(Object o) {
        }

        @Override
        public void doOnChanged(Object o, int code) {
            setConnection(code, (DBConConfiguration) o);
        }
    };

    private void setConnection(int code, DBConConfiguration con) {
        if (code == CONNECTION_SUMBER_CODE) {
            configurationSumber = con;
            String url = DatabaseTool.generateUrl(configurationSumber);
            System.out.println("URL : " + url);
            jLabelKoneksiSumber.setText(url);
        }
        if (code == CONNECTION_TARGET_CODE) {
            configurationTarget = con;
            String url = DatabaseTool.generateUrl(configurationTarget);
            System.out.println("URL : " + url);
            jLabelKoneksiTarget.setText(url);
        }
    }

    private void chooseFile() {
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        FileNameExtensionFilter filter = new FileNameExtensionFilter("xls", "xls", "XLS");
        jfc.setFileFilter(filter);
        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            System.out.println(selectedFile.getName());
            if (!(selectedFile.getName().split("\\.")[1].equalsIgnoreCase("xls"))) {
                showDialog("Hanya mendukung file .xls");
            } else {
                defaultMappingPath = selectedFile.getAbsolutePath();
                jTextMapping.setText(defaultMappingPath);

                doMapping();
                System.out.println(selectedFile.getAbsolutePath());
            }

        }
    }

    public void showDialog(final String message) {
        JOptionPane.showMessageDialog(null, message);
    }

    public void doMapping() {
        checkBoxSemua.setSelected(true);
        unsursHash = new ArrayList<>();
        try {
//            showLoadingAnimation("Membaca mapping");
            jComboBoxProduk.setEnabled(false);
            comboBoxSkala.setEnabled(false);
            buttonMigrasi.setEnabled(false);
            buttonBrowse.setEnabled(false);
            defaultMappingPath = jTextMapping.getText();
            HashMap<String, Mapping> mappings = readExcelMapping(defaultMappingPath, configurationTarget.getUsername());
            projects.stream().filter((project) -> (project.isIsSelected())).map((project) -> {
                System.out.println("MAPPING PROJECT " + project.getNamaProject() + " " + project.getTahun());
                return project;
            }).forEachOrdered((project) -> {
                ArrayList<String> unsurOfProject = project.getNamaUnsurs();
                Collections.sort(unsurOfProject);
                for (String string : unsurOfProject) {
//                    System.out.println("==> unsur " + string);
                    Unsur unsur = new Unsur();
                    unsur.setName(string);
                    unsur.setFielIdentifier(project.getFileIdentifier());
                    unsur.setTahun(project.getTahun());
                    HashMap<String, Mapping> mappingsOfUnsurs = new HashMap<>();
                    mappings.entrySet().forEach((entry) -> {
                        String key = entry.getKey();
                        Mapping value = entry.getValue();

                        if (value.getTabelSumber().equalsIgnoreCase(string)) {
                            Mapping mapping = mappings.get(key);
                            mappingsOfUnsurs.put(value.getTabelTarget(), value);
                            unsur.setMapping(value);
                        }
                    });
                    unsur.setProductionMappings(mappingsOfUnsurs);
                    unsur.setSelected(true);
                    unsur.setValid(true);
                    unsur.setStatus("OK");
                    unsursHash.add(unsur);
                }
            });

            updateTableUnsur(unsursHash.size());
            jComboBoxProduk.setEnabled(true);
            comboBoxSkala.setEnabled(true);
            buttonMigrasi.setEnabled(true);
            buttonBrowse.setEnabled(true);
        } catch (Exception e) {
            System.out.println(e.getMessage());
            jComboBoxProduk.setEnabled(true);
            comboBoxSkala.setEnabled(true);
            buttonMigrasi.setEnabled(true);
            buttonBrowse.setEnabled(true);
        }
    }

    public HashMap<String, Mapping> readExcelMapping(String path, String skemaFromLogin) {
        try {
            ExcelReader excelReader = new ExcelReader();
            HashMap<String, Mapping> newMappings = new HashMap<String, Mapping>();
            HashMap<String, Mapping> mappings = excelReader.getMappingFromExcelPublikasi(path);
            for (Map.Entry<String, Mapping> entry : mappings.entrySet()) {
                String key = entry.getKey();
                Mapping value = entry.getValue();
                if (value.getSkemaTarget().equalsIgnoreCase(skemaFromLogin)) {
                    newMappings.put(key, value);
                }

            }
            return newMappings;

        } catch (IOException ex) {
            Logger.getLogger(MigrasiSdeToSdo.class
                    .getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    private void updateTableUnsur(int size) {
        tabelUnsur.removeAll();
        DefaultTableModel dtm = (DefaultTableModel) tabelUnsur.getModel();
        dtm.setRowCount(size);
        int i = 0;
        for (Unsur unsur : unsursHash) {
            tabelUnsur.getModel().setValueAt(unsur.isSelected(), i, 0);
            tabelUnsur.getModel().setValueAt(unsur.getName(), i, 1);
            tabelUnsur.getModel().setValueAt(unsur.getFielIdentifier(), i, 2);
            tabelUnsur.getModel().setValueAt(unsur.getTahun(), i, 3);
            tabelUnsur.getModel().setValueAt(unsur.getStatus(), i, 4);
            i++;
        }

        dtm.addTableModelListener((TableModelEvent e) -> {
            int row = e.getFirstRow();
            int column = e.getColumn();
            if (column == 0) {
                TableModel model = (TableModel) e.getSource();
                Boolean checked = (Boolean) model.getValueAt(row, 0);
                Unsur unsur = unsursHash.get(row);
                unsur.setSelected(checked);
                unsursHash.set(row, unsur);
//                System.out.println(row + " " + column + " SELECTED ");
            }

        });
    }

    private void updateTableProject(int size) {
        tabelProyek.removeAll();
        //SETELAH DATA DITAMBAHKAN KE TABLE -- TAMBAHKAN LISTENER UNTUK MENGHANDLE PERUBAHAN STATUS CHECKBOX
        DefaultTableModel dtm = (DefaultTableModel) tabelProyek.getModel();
        dtm.setRowCount(size);
        dtm.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = e.getFirstRow();
                int column = e.getColumn();
                if (column == 0) {
                    TableModel model = (TableModel) e.getSource();
                    Boolean checked = (Boolean) model.getValueAt(row, column);
                    Project prj = projects.get(row);
                    prj.setIsSelected(checked);
                    projects.remove(row);
                    projects.add(row, prj);
//                    System.out.println(row + " " + column + " SELECTED ");
                }
            }
        });
        int i = 0;
        for (int j = 0; j < projects.size(); j++) {
            Project value = projects.get(j);
            tabelProyek.getModel().setValueAt(value.isIsSelected(), i, 0);
            tabelProyek.getModel().setValueAt(value.getFileIdentifier(), i, 1);
            tabelProyek.getModel().setValueAt(value.getNamaProject(), i, 2);
            tabelProyek.getModel().setValueAt(value.getTahun(), i, 3);
            i++;
        }
    }

    private void ambilDaftarUsnurBerdasarSkalaTahun() {
        try {
//          statusLabel.setText("Mengambil data ...");
//            showLoadingAnimation("Mengambil data");
            String skala = GeometryTool.getSkala(comboBoxSkala.getSelectedItem().toString());
            String produk = jComboBoxProduk.getSelectedItem().toString();
            //Thu Dec 21 16:34:49 ICT 2017   E MMM dd hh:mm:ss Z yyyy
            SimpleDateFormat formatterZ = new SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
            Date from = formatterZ.parse(spinnerTahunMulai.getValue().toString());
            Date to = formatterZ.parse(spinnerTahunSampai.getValue().toString());
            String tahunMulai = sdf.format(from);
            String tahunSampai = sdf.format(to);
            String sql = DatabaseTool.generateSQLDaftarUnsurBerdasarSkalaTahun(tahunMulai, tahunSampai, produk, skala);
            System.out.println("------- AMBIL DAFTAR UNSUR BERDASARKAN SKALA ------");
            System.out.println(sql);

            try (Connection con = DatabaseTool.getConnection(configurationSumber, null); ResultSet rs = con.createStatement().executeQuery(sql)) {
                projects = new ArrayList<>();
                while (rs.next()) {
                    Project project = new Project();
                    String fileIdentifier = rs.getString(KEY_FILEINDENTIFIER);
                    project.setFileIdentifier(fileIdentifier);
                    project.setIsSelected(true);
                    project.setNamaProject(rs.getString(KEY_TITLE));
                    ArrayList<String> namaUnsurs = new ArrayList<>();
                    String uns = rs.getString(KEY_NAMA_UNSURS);
//                    System.out.println("UNSUR == > " + uns);
                    String[] u = uns.split(";");
                    for (String u1 : u) {
                        String namaUnsur = u1.trim();
                        if (!namaUnsurs.contains(namaUnsur)) {
//                            if (namaUnsur.equalsIgnoreCase("ADMINISTRASI")) {
                            System.out.println("ADD UNSUR " + namaUnsur);
                            namaUnsurs.add(namaUnsur);
//                            }
                        }
                    }
                    project.setNamaUnsurs(namaUnsurs);
                    ArrayList<String> nlps = new ArrayList<>();
                    String nlp = rs.getString(KEY_NLPS);
                    System.out.println("NLP == > " + nlp);
                    String[] n = nlp.split(";");
                    for (String n1 : n) {
                        nlps.add(n1.trim());
                    }
                    project.setNlps(nlps);
                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy");
                    Date date = rs.getDate(KEY_DATE);
                    project.setTahun(Integer.parseInt(formatter.format(date)));
                    System.out.println("TAHUN  " + Integer.parseInt(formatter.format(date)));
                    projects.add(project);
                }
            }
            System.out.println("Ambil Data Projects, size " + projects.size());
            updateTableProject(projects.size());

            doMapping();
//            hideLoading();

        } catch (IOException | SQLException | ParseException ex) {
            Logger.getLogger(MigrasiSdoToSde.class
                    .getName()).log(Level.SEVERE, null, ex);

        }

    }

    private void doMigrasiData() {
        nlpListForUnsur = null;
        jTextPaneLog.setText("");
        Thread t = new Thread(() -> {
            try {
                logger = new LogWriter("MIGRASI_PROD-PUB");
                logger.writeToTextArea(jTextPaneLog);
                logger.log(LogWriter.INFO, "Memulai migrasi");
                logger.log(LogWriter.INFO, "Generate metadata ...");

                fileIdentifierBaruRelease = generateMetadataBaru();

                unsurTermigrasi = new HashMap<>();
                conSumber = DatabaseTool.getConnection(configurationSumber, null);

                int v = 0;
                ArrayList<Unsur> selectedUnsurs = getSelectedUnsur();
                println("SIZE SELECTED UNSUR " + selectedUnsurs.size());
                for (Unsur unsur : selectedUnsurs) {
                    if (unsur.getProductionMappings().size() > 0) {
                        println("HAS MAPPING");
                        println("Migrasi unsur " + unsur.getName() + " tahun " + unsur.getTahun());
                        logger.log(LogWriter.INFO, "Migrasi unsur " + unsur.getName() + " tahun " + unsur.getTahun());
                        logger.log(LogWriter.INFO, "Metadata " + unsur.getFielIdentifier());
                        ambilDataSumber(unsur);
                    } else {
                        logger.log(LogWriter.WARNING, "Unsur " + unsur.getName() + " tidak termapping");
                    }
//                    }
                    v++;
//                    jProgressBar2.setValue(v);
                }

                if (!conSumber.isClosed()) {
                    conSumber.close();
                }
                if (conTarget != null) {
                    if (!conTarget.isClosed()) {
                        conTarget.close();
                    }
                }

            } catch (IOException | SQLException ex) {

            } catch (ParseException ex) {
                Logger.getLogger(MigrasiProdToPubNew.class.getName()).log(Level.SEVERE, null, ex);
            }

        });
        t.start();

    }

    private void println(String message) {
        System.out.println(message);
    }

    private ArrayList<Unsur> getSelectedUnsur() {
        ArrayList<Unsur> un = new ArrayList<>();
        unsursHash.stream().filter((unsur) -> (unsur.isSelected())).forEachOrdered((unsur) -> {
            un.add(unsur);
        });
        return un;
    }

    private void ambilDataSumber(Unsur unsur) throws IOException, SQLException {

        ArrayList<String> attributes = new ArrayList<>();
        unsur.getProductionMappings().entrySet().stream().map((entry) -> {
            String key = entry.getKey();
            println("mapping key " + key);
            println("unsur name " + unsur.getName());
            return entry;
        }).forEachOrdered((entry) -> {
            try {
                Mapping mapping = entry.getValue();
                if (mapping == null) {
                } else {
                    //UNTUK KEPERLUAN AMBIL DATA (BUILD QUERY)
                    HashMap<String, Attributes> attrHashMap = mapping.getAttributes();
                    attrHashMap.entrySet().stream().map((attr) -> attr.getValue()).filter((value) -> (!attributes.contains(value.getNamaSumber()))).forEachOrdered((value) -> {
                        attributes.add(value.getNamaSumber());
                    });

                    //get Geometry Code dengan mengamil TIPE GEOMETRI DARI NAMA UNSUR --> SPLIT BERDASARKAN TANDA "_"
                    String geomCode = GeometryTool.getGeomCodes(mapping.getTabelTarget().split("_")[1]);
                    int gtype = GeometryTool.getGeomCodesSingle(mapping.getTabelTarget().split("_")[1]);

                    //JIKA  UNSUR TAHUN TERBARU SUDAH DIMIGRASIKAN MAKA MENGGUNAKAN SQL QUERY KE-2, DILAKUKAN PENGECEKANNYA ADDALAH DENGAN
                    //PERIKSA DAFTAR NLP SUDAH ADA PADA UNSUR TERSEBUT.
                    String sql = sql = DatabaseTool.generateSQLGetProduksi(unsur.getMapping().getSkemaSumber(), attributes, unsur.getName(), unsur.getFielIdentifier(), geomCode);
                    println("SQL : " + sql);

                    if (!sql.equals("")) {
                        Statement stmt1 = conSumber.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                                ResultSet.CONCUR_READ_ONLY);
                        String sqlCheckSizeData = "select count(*) count from " + unsur.getMapping().getSkemaSumber() + "." + unsur.getName() + " c WHERE METADATA = \'" + unsur.getFielIdentifier() + "\'  AND c.SHAPE.GET_GTYPE() in " + geomCode;
                        ResultSet sizeRs = stmt1.executeQuery(sqlCheckSizeData);
                        int numberData = 0;
                        while (sizeRs.next()) {
                            numberData = sizeRs.getInt("count");
                        }
                        stmt1.close();

                        if (numberData > 0) {
                            Statement stmt_ = conSumber.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
                            ResultSet rs = stmt_.executeQuery(sql);
                            String skala = GeometryTool.getSkalaInK(comboBoxSkala.getSelectedItem().toString());
                            MigrasiShapeHelper helper = new MigrasiShapeHelper(logger, configurationTarget, mapping.getSkemaTarget(), mapping.getTabelTarget(), skala);
                            getColumnNamesAndDataTypesInList(mapping);
                            helper.convertSdoToShapefile(fileIdentifierBaruRelease, columNames, dataTypes, mapping.getTabelTarget(), rs, gtype, helper.listener);

                        } else {
                            logger.log(LogWriter.WARNING, "Jumlah data " + mapping.getTabelTarget() + " : " + numberData);
                        }

                    }
                }

            } catch (SQLException | IOException ex) {
                try {
                    logger.log(LogWriter.ERROR, ex.getMessage());
                } catch (IOException ex1) {
                    Logger.getLogger(MigrasiProdToPubNew.class.getName()).log(Level.SEVERE, null, ex1);
                }

            }
        });

    }

    String[] columNames, dataTypes;

    private void getColumnNamesAndDataTypesInList(Mapping mapping) {

        HashMap<String, Attributes> attrHashMap = mapping.getAttributes();
        columNames = new String[attrHashMap.size()];
        dataTypes = new String[attrHashMap.size()];
        int i = 0;
        for (Map.Entry<String, Attributes> entry : attrHashMap.entrySet()) {
            String key = entry.getKey();
            Attributes value = entry.getValue();
            columNames[i] = key;
            dataTypes[i] = value.getDataTypeTarget();
            System.out.println("=====> " + key + " - " + value.getDataTypeTarget());
            i++;
        }

    }

    public ArrayList<KeterseidaanIndex> getNomorPetas(String tableTarget) throws IOException, SQLException {
        ArrayList<KeterseidaanIndex> keterseidaanIndexs = new ArrayList<>();
        String nlps = "";
        int i = 0;
        for (String nlp : nlpListForUnsur.get(tableTarget)) {
            if (i < nlpListForUnsur.get(tableTarget).size() - 1) {
                nlps += "'" + nlp + "'" + ",";
            } else {
                nlps += "'" + nlp + "'";
            }
            i++;
        }
        if (conSumber != null) {
            String sql = "SELECT * FROM METADATA.KETERSEDIAAN_INDEX WHERE NOMOR_PETA IN (" + nlps + ")";
            System.out.println(sql);
            Statement stmt = conSumber.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                KeterseidaanIndex ki = new KeterseidaanIndex();
                String namaPeta = rs.getString("NAMA_PETA");
                ki.setNamaPeta(namaPeta);
                ki.setNomorPeta(rs.getString("NOMOR_PETA"));
                ki.setRegion(rs.getString("REGION"));
                ki.setSkala(Integer.parseInt(rs.getString("SKALA")));
                ki.setStatus(Integer.parseInt(rs.getString("STATUS")));
                System.out.println(namaPeta);
                OraReader reader = new OraReader();
                Geometry geometry = reader.read((STRUCT) rs.getObject("SHAPE"));
                ki.setShape(geometry);
                keterseidaanIndexs.add(ki);
            }
        } else {
            System.out.println("Koneksi null");
        }

        return keterseidaanIndexs;
    }

    private ArrayList<String> getNlpOfUnsur(Unsur unsur, Mapping mapping) throws SQLException, IOException {
//        logger.log(LogWriter.INFO, "Mengambil nomor peta nlp..");
        String geomType = mapping.getTabelTarget().split("_")[1].trim();
        Statement stmt = conSumber.createStatement();
        String sql = DatabaseTool.generateSQLGetNlp(unsur, geomType, GeometryTool.getSkala(comboBoxSkala.getSelectedItem().toString()));
        println("------- MENGAMBIL NLP ------");
        println(sql);
        println("");
        ResultSet rs = stmt.executeQuery(sql);
        ArrayList<String> nlps = new ArrayList<>();
        while (rs.next()) {
            String nl = rs.getString(KEY_NOMOR_PETA);
            nlps.add(nl);
        }
        rs.close();
        stmt.close();
        return nlps;
    }

    private String generateMetadataBaru() throws IOException, ParseException {
        String projectName = jComboBoxProduk.getSelectedItem().toString();
        String skala = comboBoxSkala.getSelectedItem().toString();
        String skalaNoPembanding = comboBoxSkala.getSelectedItem().toString().split(":")[1];
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
        SimpleDateFormat formatterZ = new SimpleDateFormat("EEE MMM dd hh:mm:ss zzz yyyy");
        Date from = formatterZ.parse(spinnerTahunMulai.getValue().toString());
        Date to = formatterZ.parse(spinnerTahunSampai.getValue().toString());
        String mulaiSampai = getTahunMulaiTahunSampai();
        String tahunMulai = mulaiSampai.split("-")[0];
        String tahunSampai = mulaiSampai.split("-")[1];

        String fileIdentifierBaru = projectName + skalaNoPembanding.replace(".", "") + tahunMulai + tahunSampai; //+ "GEN" + new Date().getTime();
        String title = projectName + " " + skala + " " + mulaiSampai;

        String listFileIdentifier = "";
        for (Project project : projects) {
            if (project.isIsSelected()) {
                listFileIdentifier += project.getFileIdentifier() + ", ";
            }
        }

        String fileIdentifierBaru_ = checkFileIdentiierExist(fileIdentifierBaru);

        XmlMetadataWriter xmlMetadataWriter = new XmlMetadataWriter(fileIdentifierBaru_, title, listFileIdentifier);
        xmlMetadataWriter.write();

        logger.log(LogWriter.INFO, "metadata " + fileIdentifierBaru_);
        return fileIdentifierBaru_;
    }

    private String checkFileIdentiierExist(String fileIdentifier) {
//        File dirXML = new File(XmlMetadataWriter.pathTarget);
        File dirXML = new File("C:/migrasi/metadata-xml/publikasi/");
        String fileIdentifierBaru = fileIdentifier;

        ArrayList<File> files = new ArrayList<>();
        for (final File fileEntry : dirXML.listFiles()) {
            if (fileEntry.isDirectory()) {
            } else {
                if (fileEntry.getName().contains(fileIdentifier)) {
                    files.add(fileEntry);
                    System.out.println(fileEntry.getName());
                }

            }
        }

        if (files.size() >= 1) {
            fileIdentifierBaru = fileIdentifier + "_" + files.size();
        }

        return fileIdentifierBaru;
    }

    private String getTahunMulaiTahunSampai() {
        int[] tahuns = new int[projects.size()];
        int i = 0;
        for (Project project : projects) {
            tahuns[i] = project.getTahun();
            i++;
        }
        return getMinValue(tahuns) + "-" + getMaxValue(tahuns);
    }

    // getting the maximum value
    public static int getMaxValue(int[] array) {
        int maxValue = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > maxValue) {
                maxValue = array[i];
            }
        }
        return maxValue;
    }

// getting the miniumum value
    public static int getMinValue(int[] array) {
        int minValue = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] < minValue) {
                minValue = array[i];
            }
        }
        return minValue;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBrowse;
    private javax.swing.JButton buttonMigrasi;
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JCheckBox checkBoxSemua;
    private javax.swing.JComboBox<String> comboBoxSkala;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonKoneksiSumber;
    private javax.swing.JButton jButtonKoneksiTarget;
    private javax.swing.JComboBox<String> jComboBoxProduk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelKoneksiSumber;
    private javax.swing.JLabel jLabelKoneksiTarget;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextMapping;
    private javax.swing.JTextPane jTextPaneLog;
    private javax.swing.JSpinner spinnerTahunMulai;
    private javax.swing.JSpinner spinnerTahunSampai;
    private javax.swing.JTable tabelProyek;
    private javax.swing.JTable tabelUnsur;
    // End of variables declaration//GEN-END:variables
}
