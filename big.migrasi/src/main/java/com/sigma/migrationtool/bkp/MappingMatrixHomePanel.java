/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sigma.migrationtool.bkp;

import com.sigma.migrationtool.bkp.KelolaKoneksiDatabase;
import com.sigma.migrationtool.bkp.MappingMatrixPanel;
import com.sigma.big.controller.MappingMatrixController;
import com.sigma.big.model.db.MappingMatrix;
import com.sigma.big.utils.Activity;
import com.sigma.big.utils.ButtonCellClickedListener;
import com.sigma.big.utils.ButtonEditor;
import com.sigma.big.utils.ButtonRenderer;
import com.sigma.bigmigrasi.db.DBUtil;
import com.sigma.migrationtool.MainFrame;
import java.awt.BorderLayout;
import java.awt.Component;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ridho
 */
public class MappingMatrixHomePanel extends javax.swing.JPanel implements Activity {

    private MappingMatrixController mappingMatrixController;
    private ArrayList<MappingMatrix> mappingMatrixs;

    private MappingMatrixPanel mappingMatrixPanel;
    private JPanel contenJPanel;

    /**
     * Creates new form MappingMatrixHomePanel
     */
    public MappingMatrixHomePanel(MappingMatrixPanel mappingMatrixPanel, JPanel contentJPanel) {
        initComponents();
        this.mappingMatrixPanel = mappingMatrixPanel;
        this.contenJPanel = contentJPanel;
        mappingMatrixs = new ArrayList<>();
        drawMappingMatrixsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelMapping = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Mapping ");

        tabelMapping.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nama", "Tabel sumber", "Tabel target", "Edit", "Hapus"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabelMapping.setRowHeight(20);
        jScrollPane1.setViewportView(tabelMapping);
        if (tabelMapping.getColumnModel().getColumnCount() > 0) {
            tabelMapping.getColumnModel().getColumn(3).setPreferredWidth(20);
            tabelMapping.getColumnModel().getColumn(4).setPreferredWidth(20);
        }

        jButton1.setText("Buat mapping");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (Component component : contenJPanel.getComponents()) {
            if (mappingMatrixPanel != component) {
                changePanel((JPanel) component, mappingMatrixPanel);
                mappingMatrixPanel.onStart();
                System.out.println("mappingMatrixPanel == component");
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed
    private void changePanel(JPanel oldPanel, JPanel panel) {
        contenJPanel.remove(oldPanel);
        contenJPanel.add(panel, BorderLayout.CENTER);
        contenJPanel.invalidate();
        contenJPanel.updateUI();
        doLayout();
//        update(getParent().getGraphics());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelMapping;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onStart() {
        loadMapping();
    }

    public void loadMapping() {
        try {
            if (mappingMatrixController == null) {
                mappingMatrixController = new MappingMatrixController(new DBUtil());
            }
            mappingMatrixs = mappingMatrixController.getAllMappingColumnsAllRelations();
            drawMappingMatrixsTable();
        } catch (SQLException ex) {
            Logger.getLogger(KelolaKoneksiDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
//

    public void drawMappingMatrixsTable() {
        DefaultTableModel dtm = (DefaultTableModel) tabelMapping.getModel();
        dtm.setRowCount(mappingMatrixs.size());
        tabelMapping.getColumn("Edit").setCellRenderer(new ButtonRenderer("Edit"));
        tabelMapping.getColumn("Edit").setCellEditor(
                new ButtonEditor(new JCheckBox(), "Edit", new ButtonCellClickedListener() {
                    @Override
                    public void onClick(int code, int row) {
                        System.out.println("ROW " + row);
                        // TODO add your handling code here:
                        for (Component component : contenJPanel.getComponents()) {
                            if (mappingMatrixPanel != component) {
                                changePanel((JPanel) component, mappingMatrixPanel);
                                mappingMatrixPanel.onStart();
                                System.out.println("mappingMatrixPanel == component");
                            }
                        }
                    }
                }, 1));

        tabelMapping.getColumn("Hapus").setCellRenderer(new ButtonRenderer("Hapus"));
        tabelMapping.getColumn("Hapus").setCellEditor(
                new ButtonEditor(new JCheckBox(), "Hapus", new ButtonCellClickedListener() {
                    @Override
                    public void onClick(int code, int row) {
                        int reply = JOptionPane.showConfirmDialog(null, "Apakah anda yakin menghaspus data ini ?", "Perhatian", JOptionPane.YES_NO_OPTION);
                        if (reply == JOptionPane.YES_OPTION) {
                            System.out.println("ROW " + row);
                            try {
                                MappingMatrix mappingMatrix = mappingMatrixs.get(row);
                                mappingMatrixController.delete(mappingMatrix.getId());
                                mappingMatrixs = mappingMatrixController.getAllMappingColumnsAllRelations();
                                updateTable();
                            } catch (IOException ex) {
                                Logger.getLogger(MappingMatrixHomePanel.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(MappingMatrixHomePanel.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {

                        }
                    }
                }, 1));
        int i = 0;
        for (MappingMatrix matrix : mappingMatrixs) {
            tabelMapping.getModel().setValueAt(matrix.getName(), i, 0);
            tabelMapping.getModel().setValueAt(matrix.getTableSource(), i, 1);
            tabelMapping.getModel().setValueAt(matrix.getTableTarget(), i, 2);
            tabelMapping.getModel().setValueAt(new JButton("Edit"), i, 3);
            tabelMapping.getModel().setValueAt(new JButton("Hapis"), i, 4);
            i++;
        }
    }

    private void updateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tabelMapping.getModel();
        dtm.setRowCount(mappingMatrixs.size());
        int i = 0;
        for (MappingMatrix matrix : mappingMatrixs) {
            tabelMapping.getModel().setValueAt(matrix.getName(), i, 0);
            tabelMapping.getModel().setValueAt(matrix.getTableSource(), i, 1);
            tabelMapping.getModel().setValueAt(matrix.getTableTarget(), i, 2);
            tabelMapping.getModel().setValueAt(new JButton("Edit"), i, 3);
            tabelMapping.getModel().setValueAt(new JButton("Hapis"), i, 4);
            i++;
        }

    }

    @Override
    public void onPause() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void onResume() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
